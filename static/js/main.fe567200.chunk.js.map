{"version":3,"sources":["App.js","data.js","Components/Display.jsx","Components/Button.jsx","Components/Buttons.jsx","Components/Calculator.jsx","Components/Footer.jsx","Components/Header.jsx","Components/Main.jsx","serviceWorker.js","index.js"],"names":["App","useState","expresion","setExpresion","outputValue","setOutputValue","evaluatedExpresion","setEvaluatedExpresion","usingOperator","setUsingOperator","handleInput","innerText","value","regux","operators","result","test","toString","replace","eval","fullExpression","newValue","slice","length","console","log","newOutPut","handlekey","e","key","document","querySelector","data","buttons","button","id","type","Display","className","disabled","Button","handleClick","styleGridArea","gridArea","style","onClick","target","data-type","data-key","Buttons","buttonsData","newButtons","map","buttonData","Calculator","Footer","href","rel","Header","Main","handleKey","onKeyDown","tabIndex","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"o1BAMA,SAASA,MAAO,IAAD,UACoBC,oDAAS,GAD7B,oMACNC,UADM,cACIC,aADJ,yBAEwBF,oDAAS,IAFjC,qMAENG,YAFM,cAEMC,eAFN,yBAGsCJ,oDAAS,IAH/C,qMAGNK,mBAHM,cAGaC,sBAHb,yBAI4BN,qDAAS,GAJrC,qMAINO,cAJM,cAIQC,iBAJR,cAMPC,YAAc,SAAdA,YAAcC,WAElB,IAAMC,MAAQD,UACRE,MAAQ,eACRC,UAAY,SACdC,OAqCJ,GAlCkB,IAAdb,WAAmBM,cACrBO,OAAS,GAAMH,MAEPJ,gBACRO,OAASb,UAAYU,OAMpBC,MAAMG,KAAKJ,OAGZH,kBAAiB,GAEjBA,kBAAiB,GAKnBJ,eAAeD,YAAcQ,OAC7BT,aAAaY,OAAOE,YAGjBH,UAAUE,KAAKJ,SACbC,MAAMG,KAAKZ,cAEZC,eAAeD,YAAYc,QAAQL,MAAMD,QAG3CT,aAAaS,QAIF,MAAVA,MAAc,CACfG,OAASI,KAAKf,YAAYc,QAAQ,IAAI,MACtC,IAAIE,eAAc,UAAMhB,YAAN,aAAsBW,QACxCV,eAAee,gBACfjB,aAAaY,QACbR,sBAAsBQ,QAsBxB,IAnBGT,oBAA6C,IAAvBA,sBACpBQ,UAAUE,KAAKJ,OAChBP,eAAeH,UAAYU,QAE3BT,aAAaS,OACbP,eAAeO,QAEjBL,sBAAsB,KAIX,OAAVK,QACDT,aAAa,GACbE,eAAe,IACfI,kBAAiB,GACjBF,sBAAsB,KAIZ,WAATK,MAAa,CACd,GAAiB,IAAdV,UAGD,OAFAC,aAAa,QACbE,eAAe,GAGjB,IAAIgB,SAAyB,WAAdnB,WAAqBA,UAAUoB,MAAM,EAAEpB,UAAUqB,OAAS,GACzEC,QAAQC,IAAIJ,UACZlB,aAAakB,UACb,IAAIK,UAA4B,WAAhBtB,aAAwBA,YAAYkB,MAAM,EAAElB,YAAYmB,OAAS,GACjFlB,eAAeqB,aAIbC,UAAY,SAACC,GACjBJ,QAAQC,IAAIG,GACZ,IAAMC,EAAMC,SAASC,cAAT,2BAA2CH,EAAEC,IAA7C,OACZ,GAAIA,EAAJ,CACA,IAAMjB,EAAQiB,EAAIlB,UAClBD,YAAYE,KAGd,OACE,2DAAC,gDAAD,CACEoB,KAAQA,qCACRpB,MAASV,UACTQ,YAAeA,YACfN,YAAeA,YACfuB,UAAaA,YAKJ3B,2B,6BC5FAiC,IAtBC,CACZ,CAACC,OAAS,EAAIC,GAAK,OAASC,KAAO,UACnC,CAACF,OAAS,EAAIC,GAAK,MAAQC,KAAO,UAClC,CAACF,OAAS,EAAIC,GAAK,MAAQC,KAAO,UAClC,CAACF,OAAS,EAAIC,GAAK,QAAUC,KAAO,UACpC,CAACF,OAAS,EAAIC,GAAK,OAASC,KAAO,UACnC,CAACF,OAAS,EAAIC,GAAK,OAASC,KAAO,UACnC,CAACF,OAAS,EAAIC,GAAK,MAAQC,KAAO,UAClC,CAACF,OAAS,EAAIC,GAAK,QAAUC,KAAO,UACpC,CAACF,OAAS,EAAIC,GAAK,QAAUC,KAAO,UACpC,CAACF,OAAS,EAAIC,GAAK,OAASC,KAAO,UACnC,CAACF,OAAS,KAAOC,GAAK,QAAUC,KAAO,YACvC,CAACF,OAAS,IAAMC,GAAK,aAAeC,KAAO,YAC3C,CAACF,OAAS,SAAMC,GAAK,SAAWC,KAAO,WAAWP,IAAM,aACxD,CAACK,OAAS,IAAMC,GAAK,SAAWC,KAAO,YACvC,CAACF,OAAS,IAAMC,GAAK,WAAaC,KAAO,WAAWP,IAAM,KAC1D,CAACK,OAAS,IAAMC,GAAK,WAAaC,KAAO,YACzC,CAACF,OAAS,IAAMC,GAAK,MAAQC,KAAO,YACpC,CAACF,OAAS,IAAMC,GAAK,SAAWC,KAAM,WAAWP,IAAM,SACvD,CAACK,OAAS,IAAMC,GAAK,UAAYC,KAAO,c,iDCR7BC,EATC,SAAC,GAAyB,IAAxBzB,EAAuB,EAAvBA,MAAMR,EAAiB,EAAjBA,YACpB,OACI,yBAAKkC,UAAY,qBACb,2BAAOF,KAAK,OAAOD,GAAG,SAASI,UAAQ,EAAC3B,MAASR,IACjD,2BAAOgC,KAAK,OAAOD,GAAG,UAAUI,UAAQ,EAAC3B,MAASA,MCS/C4B,EAbA,SAAC,GAAwB,IAAvBR,EAAsB,EAAtBA,KAAKS,EAAiB,EAAjBA,YACXP,EAAsBF,EAAtBE,OAAOC,EAAeH,EAAfG,GAAGC,EAAYJ,EAAZI,KAAKP,EAAOG,EAAPH,IAChBa,EAAgB,CAClBC,SAAWR,GAMf,OACI,4BAAQA,GAAMA,EAAIS,MAASF,EAAeG,QALrB,SAAAjB,GAAK,IACrBjB,EAAaiB,EAAEkB,OAAfnC,UACL8B,EAAY9B,IAG2DoC,YAAaX,EAAMY,WAAWnB,GAAYK,GAAUA,ICGpHe,EAZC,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,YAAYT,EAAiB,EAAjBA,YACpBU,EAAaD,EAAYE,KAAM,SAACC,EAAWxB,GAC7C,OACI,kBAAC,EAAD,CAAQA,IAAOA,EAAKG,KAAQqB,EAAYZ,YAAcA,OAG9D,OACI,yBAAKH,UAAY,qBACZa,ICIEG,EAXI,SAAC,GAA0C,IAAzCtB,EAAwC,EAAxCA,KAAKpB,EAAmC,EAAnCA,MAAMR,EAA6B,EAA7BA,YAAYM,EAAiB,EAAjBA,YACxC,OACI,yBAAK4B,UAAY,wBACb,kBAAC,EAAD,CAAS1B,MAASA,EAAOR,YAAeA,IACxC,kBAAC,EAAD,CACI8C,YAAelB,EACfS,YAAe/B,MCAhB6C,EARA,WACX,OACI,gCACI,uCAAY,uBAAGC,KAAK,4BAA4BV,OAAS,SAASW,IAAI,uBAA1D,aCKTC,EARA,WACX,OACI,gCACI,uDCgBGC,IAhBF,SAAC,GAAqD,IAApD3B,EAAmD,EAAnDA,KAAKpB,EAA8C,EAA9CA,MAAMR,EAAwC,EAAxCA,YAAYM,EAA4B,EAA5BA,YAAYkD,EAAgB,EAAhBA,UAC9C,OACI,oCACA,kBAAC,EAAD,MACA,yBAAKzB,GAAK,YAAY0B,UAAYD,EAAWE,SAAW,KACpD,kBAAC,EAAD,CACI9B,KAAQA,EACRpB,MAASA,EACTR,YAAeA,EACfM,YAAcA,IAClB,kBAAC,EAAD,U,sICHQqD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACtE,EAAA,EAAD,OAEF8B,SAASyC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvD,QAAQuD,MAAMA,EAAMC,c","file":"static/js/main.fe567200.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport Main from \"./Components/Main\";\nimport data from \"./data\";\nimport \"./Styles/styles.scss\";\n\n\nfunction App() {\n  const [expresion,setExpresion] = useState(0);\n  const [outputValue,setOutputValue] = useState('');\n  const [evaluatedExpresion,setEvaluatedExpresion] = useState('');\n  const [usingOperator,setUsingOperator] = useState(false)\n\n  const handleInput = innerText => {\n\n    const value = innerText ;\n    const regux = /[/+-/x/.//]$/;\n    const operators = /[+-/x]/;\n    let result;\n\n    //assing a value to result varialbe\n    if( expresion === 0 || usingOperator){\n      result = \"\" +  value;\n     // console.log(\"hey\")\n    }else if(!usingOperator){\n      result = expresion + value;\n      //console.log(result);\n      //console.log(\"heyyo\")\n    }\n\n    //checking if I using operators\n    if(regux.test(value)){\n      //console.log(\"yes\");\n      //console.log(value);\n      setUsingOperator(true);\n    }else{\n      setUsingOperator(false);\n      //console.log(\"no\");\n    }\n    \n    \n    setOutputValue(outputValue + value);\n    setExpresion(result.toString());\n\n    //This method help to replace operator when it's repeat\n    if(operators.test(value)){\n      if(regux.test(outputValue)){\n        //console.log(\"need replace\")\n        setOutputValue(outputValue.replace(regux,value))\n      }\n      //console.log(\"It is an operator\")\n      setExpresion(value)\n    }\n\n    //Method to eval an expression\n    if(value === \"=\"){\n      result = eval(outputValue.replace(\"x\",\"*\"))\n      let fullExpression = `${outputValue}= ${result}`\n      setOutputValue(fullExpression);\n      setExpresion(result)\n      setEvaluatedExpresion(result)\n    }\n    //Method that define what occur when a expression is eval\n    if(evaluatedExpresion || evaluatedExpresion === 0){\n      if(operators.test(value)){\n        setOutputValue(expresion + value)\n      }else{\n        setExpresion(value)\n        setOutputValue(value)\n      }\n      setEvaluatedExpresion(\"\")\n    }\n\n    //Method to clean all\n    if(value === \"AC\"){\n      setExpresion(0)\n      setOutputValue(\"\")\n      setUsingOperator(false)\n      setEvaluatedExpresion(\"\")\n    }\n\n    //eraser method{\n    if(value ==='⌫'){\n      if(expresion === 0){\n        setExpresion(0);\n        setOutputValue(0);\n        return\n      };\n      let newValue = expresion !== \"⌫\" && expresion.slice(0,expresion.length - 1);\n      console.log(newValue)\n      setExpresion(newValue)\n      let newOutPut = outputValue !== \"⌫\" &&  outputValue.slice(0,outputValue.length - 1)\n      setOutputValue(newOutPut)\n    }\n  }\n\n  const handlekey = (e) =>{\n    console.log(e)\n    const key = document.querySelector(`button[data-key=\"${e.key}\"]`);\n    if(!key) return;\n    const value = key.innerText;\n    handleInput(value);\n  }\n\n  return (\n    <Main \n      data = {data} \n      value = {expresion} \n      handleInput = {handleInput}\n      outputValue = {outputValue}\n      handlekey = {handlekey}\n      /> \n  );\n}\n\nexport default App;\n","const buttons = [\r\n    {button : 0 , id : \"zero\" , type : \"number\"},\r\n    {button : 1 , id : \"one\" , type : \"number\"},\r\n    {button : 2 , id : \"two\" , type : \"number\"},\r\n    {button : 3 , id : \"three\" , type : \"number\"},\r\n    {button : 4 , id : \"four\" , type : \"number\"},\r\n    {button : 5 , id : \"five\" , type : \"number\"},\r\n    {button : 6 , id : \"six\" , type : \"number\"},\r\n    {button : 7 , id : \"seven\" , type : \"number\"},\r\n    {button : 8 , id : \"eight\" , type : \"number\"},\r\n    {button : 9 , id : \"nine\" , type : \"number\"},\r\n    {button : 'AC' , id : \"clear\" , type : \"operator\"},\r\n    {button : '%' , id : \"percentage\" , type : \"operator\"},\r\n    {button : '⌫' , id : \"eraser\" , type : \"operator\",key : 'Backspace'},\r\n    {button : '/' , id : \"divide\" , type : \"operator\"},\r\n    {button : 'x' , id : \"multiply\" , type : \"operator\",key : '*'},\r\n    {button : '-' , id : \"subtract\" , type : \"operator\"},\r\n    {button : '+' , id : \"add\" , type : \"operator\"},\r\n    {button : '=' , id : \"equals\" , type :\"operator\",key : 'Enter'},\r\n    {button : '.' , id : \"decimal\" , type : \"operator\"},\r\n];\r\n\r\nexport default buttons;","import React from \"react\";\r\n\r\nconst Display = ({value,outputValue}) => {\r\n    return(\r\n        <div className = \"display_container\">\r\n            <input type=\"text\" id=\"output\" disabled value = {outputValue}/>\r\n            <input type=\"text\" id=\"display\" disabled value = {value}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Display;","import React from 'react';\r\n\r\nconst Button = ({data,handleClick}) => {\r\n    const {button,id,type,key} = data\r\n    const styleGridArea = {\r\n        gridArea : id\r\n    }\r\n    const handleClickInput = e =>{\r\n        let {innerText} = e.target\r\n        handleClick(innerText)\r\n    }\r\n    return(\r\n        <button id = {id} style = {styleGridArea} onClick = {handleClickInput} data-type = {type} data-key={ key ? key : button }>{button}</button>\r\n    )\r\n}\r\nexport default Button;\r\n","import React from 'react';\r\nimport Button from './Button';\r\n\r\nconst Buttons = ({buttonsData,handleClick}) => {\r\n    const newButtons = buttonsData.map(  (buttonData,key) => {\r\n        return(\r\n            <Button key = {key} data = {buttonData} handleClick={ handleClick}/>\r\n        )\r\n    })\r\n    return(\r\n        <div className = \"buttons_container\">\r\n            {newButtons}\r\n        </div>\r\n    )\r\n}\r\nexport default Buttons;","import React from \"react\";\r\nimport Display from \"./Display\";\r\nimport Buttons from \"./Buttons\";\r\n\r\nconst Calculator = ({data,value,outputValue,handleInput}) => {\r\n    return(\r\n        <div className = \"calculator_container\">\r\n            <Display value = {value} outputValue = {outputValue} />\r\n            <Buttons \r\n                buttonsData = {data} \r\n                handleClick = {handleInput}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Calculator;\r\n\r\n","import React from \"react\";\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer>\r\n            <p>Coded by <a href=\"https://github.com/dg0397\" target = \"_blank\" rel=\"noopener noreferrer\">DG0397</a></p>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React from \"react\";\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header>\r\n            <h1>JavaScript Calculator</h1>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport Calculator from './Calculator';\r\nimport Footer from './Footer';\r\nimport Header from \"./Header\";\r\n\r\nconst Main = ({data,value,outputValue,handleInput,handleKey,}) => {\r\n    return(\r\n        <>\r\n        <Header/>\r\n        <div id = \"container\" onKeyDown= {handleKey} tabIndex = \"1\">\r\n            <Calculator \r\n                data = {data} \r\n                value = {value} \r\n                outputValue = {outputValue} \r\n                handleInput= {handleInput}/>\r\n            <Footer />\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Main;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}